(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{365:function(e,a,t){"use strict";t.r(a);var r=t(0),s=Object(r.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"client-sdk-overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#client-sdk-overview"}},[e._v("#")]),e._v(" Client SDK Overview")]),e._v(" "),a("ul",[a("li",[e._v("Samples: "),a("a",{attrs:{href:"https://github.com/uber/cadence-java-samples",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/uber/cadence-java-samples"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("JavaDoc documentation: "),a("a",{attrs:{href:"https://www.javadoc.io/doc/com.uber.cadence/cadence-client",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.javadoc.io/doc/com.uber.cadence/cadence-client"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"javadoc-packages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javadoc-packages"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://www.javadoc.io/doc/com.uber.cadence/cadence-client/latest/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaDoc Packages"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"com-uber-cadence-activity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#com-uber-cadence-activity"}},[e._v("#")]),e._v(" com.uber.cadence.activity")]),e._v(" "),a("p",[e._v("APIs to implement activity: accessing activity info, or sending heartbeat.")]),e._v(" "),a("h3",{attrs:{id:"com-uber-cadence-client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#com-uber-cadence-client"}},[e._v("#")]),e._v(" com.uber.cadence.client")]),e._v(" "),a("p",[e._v("APIs for external application code to interact with Cadence workflows: start workflows, send signals or query workflows.")]),e._v(" "),a("h3",{attrs:{id:"com-uber-cadence-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#com-uber-cadence-workflow"}},[e._v("#")]),e._v(" com.uber.cadence.workflow")]),e._v(" "),a("p",[e._v("APIs to implement workflows.")]),e._v(" "),a("h3",{attrs:{id:"com-uber-cadence-worker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#com-uber-cadence-worker"}},[e._v("#")]),e._v(" com.uber.cadence.worker")]),e._v(" "),a("p",[e._v("APIs to configure and start workers.")]),e._v(" "),a("h3",{attrs:{id:"com-uber-cadence-testing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#com-uber-cadence-testing"}},[e._v("#")]),e._v(" com.uber.cadence.testing")]),e._v(" "),a("p",[e._v("APIs to write unit tests for workflows.")]),e._v(" "),a("h2",{attrs:{id:"samples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#samples"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://github.com/uber/cadence-java-samples/tree/master/src/main/java/com/uber/cadence/samples",target:"_blank",rel:"noopener noreferrer"}},[e._v("Samples"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"com-uber-cadence-samples-hello"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#com-uber-cadence-samples-hello"}},[e._v("#")]),e._v(" com.uber.cadence.samples.hello")]),e._v(" "),a("p",[e._v("Samples of how to use the basic feature: activity, local activity, ChildWorkflow, Query, etc.\nThis is the most important package you need to start with.")]),e._v(" "),a("h3",{attrs:{id:"com-uber-cadence-samples-bookingsaga"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#com-uber-cadence-samples-bookingsaga"}},[e._v("#")]),e._v(" com.uber.cadence.samples.bookingsaga")]),e._v(" "),a("p",[e._v("An end-to-end example to write workflow using SAGA APIs.")]),e._v(" "),a("h3",{attrs:{id:"com-uber-cadence-samples-fileprocessing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#com-uber-cadence-samples-fileprocessing"}},[e._v("#")]),e._v(" com.uber.cadence.samples.fileprocessing")]),e._v(" "),a("p",[e._v("An end-to-end example to write workflows to download a file, zips it, and uploads it to a destination.")]),e._v(" "),a("p",[e._v("An important requirement for such a workflow is that while a first activity can run\non any host, the second and third must run on the same host as the first one. This is achieved\nthrough use of a host specific task list. The first activity returns the name of the host\nspecific task list and all other activities are dispatched using the stub that is configured with\nit. This assumes that FileProcessingWorker has a worker running on the same task list.")])])}),[],!1,null,null,null);a.default=s.exports}}]);