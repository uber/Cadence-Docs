"use strict";(self.webpackChunkcadence=self.webpackChunkcadence||[]).push([[6763],{5658:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"java-client/testing","title":"Testing","description":"TestActivityEnvironment is the helper class for unit testing activity implementations. Supports calls to Activity methods from the tested activities. An example test:","source":"@site/docs/04-java-client/17-testing.md","sourceDirName":"04-java-client","slug":"/java-client/testing","permalink":"/docs/java-client/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/cadence-workflow/Cadence-Docs/tree/master/docs/04-java-client/17-testing.md","tags":[],"version":"current","sidebarPosition":17,"frontMatter":{"layout":"default","title":"Testing","permalink":"/docs/java-client/testing"},"sidebar":"docsSidebar","previous":{"title":"Side Effect","permalink":"/docs/java-client/side-effect"},"next":{"title":"Workflow Replay and Shadowing","permalink":"/docs/java-client/workflow-replay-shadowing"}}');var s=n(4848),o=n(8453);const a={layout:"default",title:"Testing",permalink:"/docs/java-client/testing"},r="Activity Test Environment",l={},c=[{value:"Workflow Test Environment",id:"workflow-test-environment",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"activity-test-environment",children:"Activity Test Environment"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://www.javadoc.io/static/com.uber.cadence/cadence-client/2.7.9-alpha/com/cadence-workflow/cadence/testing/TestActivityEnvironment.html",children:"TestActivityEnvironment"})," is the helper class for unit testing activity implementations. Supports calls to Activity methods from the tested activities. An example test:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/cadence-workflow/cadence-java-samples/blob/master/src/test/java/com/uber/cadence/samples/hello/HelloActivityTest.java",children:"See full example here."})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'\n   public interface TestActivity {\n     String activity1(String input);\n   }\n\n   private static class ActivityImpl implements TestActivity {\n     @Override\n     public String activity1(String input) {\n       return Activity.getTask().getActivityType().getName() + "-" + input;\n     }\n   }\n\n   @Test\n   public void testSuccess() {\n     testEnvironment.registerActivitiesImplementations(new ActivityImpl());\n     TestActivity activity = testEnvironment.newActivityStub(TestActivity.class);\n     String result = activity.activity1("input1");\n     assertEquals("TestActivity::activity1-input1", result);\n   }\n\n'})}),"\n",(0,s.jsx)(t.h2,{id:"workflow-test-environment",children:"Workflow Test Environment"}),"\n",(0,s.jsx)(t.p,{children:"TestWorkflowEnvironment provides workflow unit testing capabilities."}),"\n",(0,s.jsx)(t.p,{children:"Testing the workflow code is hard as it might be potentially very long running. The included in-memory implementation of the Cadence service supports an automatic time skipping. Anytime a workflow under the test as well as the unit test code are waiting on a timer (or sleep) the internal service time is automatically advanced to the nearest time that unblocks one of the waiting threads. This way a workflow that runs in production for months is unit tested in milliseconds. Here is an example of a test that executes in a few milliseconds instead of over two hours that are needed for the workflow to complete."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/cadence-workflow/cadence-java-samples/blob/master/src/test/java/com/uber/cadence/samples/hello/HelloSignalTest.java#L76",children:"See full example here. "})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'public class SignaledWorkflowImpl implements SignaledWorkflow {\n  private String signalInput;\n\n  @Override\n  public String workflow1(String input) {\n    Workflow.sleep(Duration.ofHours(1));\n    Workflow.await(() -> signalInput != null);\n    Workflow.sleep(Duration.ofHours(1));\n    return signalInput + "-" + input;\n  }\n\n  @Override\n  public void processSignal(String input) {\n    signalInput = input;\n }\n}\n\n@Test\npublic void testSignal() throws ExecutionException, InterruptedException {\n    // Get a workflow stub using the same task list the worker uses.\n    WorkflowOptions workflowOptions =\n        new WorkflowOptions.Builder()\n            .setTaskList(HelloSignal.TASK_LIST)\n            .setExecutionStartToCloseTimeout(Duration.ofDays(30))\n            .build();\n    GreetingWorkflow workflow =\n        workflowClient.newWorkflowStub(GreetingWorkflow.class, workflowOptions);\n\n    // Start workflow asynchronously to not use another thread to signal.\n    WorkflowClient.start(workflow::getGreetings);\n\n    // After start for getGreeting returns, the workflow is guaranteed to be started.\n    // So we can send a signal to it using workflow stub immediately.\n    // But just to demonstrate the unit testing of a long running workflow adding a long sleep here.\n    testEnv.sleep(Duration.ofDays(1));\n    // This workflow keeps receiving signals until exit is called\n    workflow.waitForName("World");\n    workflow.waitForName("Universe");\n    workflow.exit();\n    // Calling synchronous getGreeting after workflow has started reconnects to the existing\n    // workflow and\n    // blocks until result is available. Note that this behavior assumes that WorkflowOptions are\n    // not configured\n    // with WorkflowIdReusePolicy.AllowDuplicate. In that case the call would fail with\n    // WorkflowExecutionAlreadyStartedException.\n    List<String> greetings = workflow.getGreetings();\n    assertEquals(2, greetings.size());\n    assertEquals("Hello World!", greetings.get(0));\n    assertEquals("Hello Universe!", greetings.get(1));\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(6540);const s={},o=i.createContext(s);function a(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);