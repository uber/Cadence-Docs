"use strict";(self.webpackChunkcadence=self.webpackChunkcadence||[]).push([[1919],{7747:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"java-client/workflow-interface","title":"Workflow interface","description":"Workflowactivity and childworkflows:.","source":"@site/docs/04-java-client/02-workflow-interface.md","sourceDirName":"04-java-client","slug":"/java-client/workflow-interface","permalink":"/Cadence-Docs/docs/java-client/workflow-interface","draft":false,"unlisted":false,"editUrl":"https://github.com/cadence-workflow/Cadence-Docs/tree/master/docs/04-java-client/02-workflow-interface.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"layout":"default","title":"Workflow interface","permalink":"/docs/java-client/workflow-interface"},"sidebar":"docsSidebar","previous":{"title":"Client SDK Overview","permalink":"/Cadence-Docs/docs/java-client/client-overview"},"next":{"title":"Implementing workflows","permalink":"/Cadence-Docs/docs/java-client/implementing-workflows"}}');var a=n(4848),r=n(8453);const s={layout:"default",title:"Workflow interface",permalink:"/docs/java-client/workflow-interface"},i="Workflow interface",c={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"workflow-interface",children:"Workflow interface"})}),"\n",(0,a.jsx)(t.p,{children:"Workflow encapsulates the orchestration of activities and child workflows.\nIt can also answer synchronous queries and receive external events (also known as signals)."}),"\n",(0,a.jsx)(t.p,{children:"A workflow must define an interface class. All of its methods must have one of the following annotations:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"@WorkflowMethod"})," indicates an entry point to a workflow. It contains parameters such as timeouts and a task_list.\nRequired parameters (such as ",(0,a.jsx)(t.code,{children:"executionStartToCloseTimeoutSeconds"}),") that are not specified through the annotation must be provided at runtime."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"@SignalMethod"})," indicates a method that reacts to external signals. It must have a ",(0,a.jsx)(t.code,{children:"void"})," return type."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"@QueryMethod"})," indicates a method that reacts to synchronous query requests."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"You can have more than one method with the same annotation (except @WorkflowMethod). For example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'public interface FileProcessingWorkflow {\n\n    @WorkflowMethod(executionStartToCloseTimeoutSeconds = 10, taskList = "file-processing")\n    String processFile(Arguments args);\n\n    @QueryMethod(name="history")\n    List<String> getHistory();\n\n    @QueryMethod(name="status")\n    String getStatus();\n\n    @SignalMethod\n    void retryNow();\n\n    @SignalMethod\n    void abandon();\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"We recommended that you use a single value type argument for workflow methods. In this way, adding new arguments as fields to the value type is a backwards-compatible change."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var o=n(6540);const a={},r=o.createContext(a);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);