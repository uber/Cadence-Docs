"use strict";(self.webpackChunkcadence=self.webpackChunkcadence||[]).push([[6401],{9878:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"java-client/activity-interface","title":"Activity interface","description":"An is a manifestation of a particular in the business logic.","source":"@site/docs/04-java-client/05-activity-interface.md","sourceDirName":"04-java-client","slug":"/java-client/activity-interface","permalink":"/docs/java-client/activity-interface","draft":false,"unlisted":false,"editUrl":"https://github.com/cadence-workflow/Cadence-Docs/tree/master/docs/04-java-client/05-activity-interface.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"layout":"default","title":"Activity interface","permalink":"/docs/java-client/activity-interface"},"sidebar":"docsSidebar","previous":{"title":"Starting workflows","permalink":"/docs/java-client/starting-workflow-executions"},"next":{"title":"Versioning","permalink":"/docs/java-client/versioning"}}');var a=i(4848),c=i(8453);const r={layout:"default",title:"Activity interface",permalink:"/docs/java-client/activity-interface"},o="Activity interface",s={},l=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"activity-interface",children:"Activity interface"})}),"\n",(0,a.jsx)(t.p,{children:"An activity is a manifestation of a particular task in the business logic."}),"\n",(0,a.jsxs)(t.p,{children:["Activities are defined as methods of a plain Java interface. Each method defines a single activity type. A single\nworkflow can use more than one activity interface and call more than one activity method from the same interface.\nThe only requirement is that activity method arguments and return values are serializable to a byte array using the provided\n",(0,a.jsx)(t.a,{href:"https://static.javadoc.io/com.uber.cadence/cadence-client/2.4.1/index.html?com/cadence-workflow/cadence/converter/DataConverter.html",children:"DataConverter"}),"\ninterface. The default implementation uses a JSON serializer, but an alternative implementation can be easily configured."]}),"\n",(0,a.jsx)(t.p,{children:"Following is an example of an interface that defines four activities:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"public interface FileProcessingActivities {\n\n    void upload(String bucketName, String localName, String targetName);\n\n    String download(String bucketName, String remoteName);\n\n    @ActivityMethod(scheduleToCloseTimeoutSeconds = 2)\n    String processFile(String localName);\n\n    void deleteLocalFile(String fileName);\n}\n\n"})}),"\n",(0,a.jsx)(t.p,{children:"We recommend to use a single value type argument for activity methods. In this way, adding new arguments as fields\nto the value type is a backwards-compatible change."}),"\n",(0,a.jsx)(t.p,{children:"An optional @ActivityMethod annotation can be used to specify activity options like timeouts or a task_list. Required options\nthat are not specified through the annotation must be specified at runtime."})]})}function u(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>o});var n=i(6540);const a={},c=n.createContext(a);function r(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);