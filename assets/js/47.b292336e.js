(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{355:function(e,t,r){"use strict";r.r(t);var a=r(0),o=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"synchronous-query"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronous-query"}},[e._v("#")]),e._v(" Synchronous query")]),e._v(" "),t("p",[t("Term",{attrs:{term:"workflow",show:"Workflow"}}),e._v(" code is stateful with the Cadence framework preserving it over various software and hardware failures. The state is constantly mutated during "),t("Term",{attrs:{term:"workflow_execution"}}),e._v(". To expose this internal state to the external world Cadence provides a synchronous "),t("Term",{attrs:{term:"query"}}),e._v(" feature. From the "),t("Term",{attrs:{term:"workflow"}}),e._v(" implementer point of view the "),t("Term",{attrs:{term:"query"}}),e._v(" is exposed as a synchronous callback that is invoked by external entities. Multiple such callbacks can be provided per "),t("Term",{attrs:{term:"workflow"}}),e._v(" type exposing different information to different external systems.")],1),e._v(" "),t("p",[e._v("To execute a "),t("Term",{attrs:{term:"query"}}),e._v(" an external client calls a synchronous Cadence API providing "),t("em",[t("Term",{attrs:{term:"domain"}}),e._v(", workflowID, "),t("Term",{attrs:{term:"query"}}),e._v(" name")],1),e._v(" and optional "),t("em",[t("Term",{attrs:{term:"query"}}),e._v(" arguments")],1),e._v(".")],1),e._v(" "),t("p",[t("Term",{attrs:{term:"query",show:"Query"}}),e._v(" callbacks must be read-only not mutating the "),t("Term",{attrs:{term:"workflow"}}),e._v(" state in any way. The other limitation is that the "),t("Term",{attrs:{term:"query"}}),e._v(" callback cannot contain any blocking code. Both above limitations rule out ability to invoke "),t("Term",{attrs:{term:"activity",show:"activities"}}),e._v(" from the "),t("Term",{attrs:{term:"query"}}),e._v(" handlers.")],1),e._v(" "),t("p",[e._v("Cadence team is currently working on implementing "),t("em",[e._v("update")]),e._v(" feature that would be similar to "),t("Term",{attrs:{term:"query"}}),e._v(" in the way it is invoked, but would support "),t("Term",{attrs:{term:"workflow"}}),e._v(" state mutation and "),t("Term",{attrs:{term:"local_activity"}}),e._v(" invocations. From user's point of view, "),t("em",[e._v("update")]),e._v(" is similar to signal + strong consistent query, but implemented in a much less expensive way in Cadence.")],1),e._v(" "),t("h2",{attrs:{id:"stack-trace-query"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stack-trace-query"}},[e._v("#")]),e._v(" Stack Trace Query")]),e._v(" "),t("p",[e._v("The Cadence client libraries expose some predefined "),t("Term",{attrs:{term:"query",show:"queries"}}),e._v(" out of the box. Currently the only supported built-in "),t("Term",{attrs:{term:"query"}}),e._v(" is "),t("em",[e._v("stack_trace")]),e._v(". This "),t("Term",{attrs:{term:"query"}}),e._v(" returns stacks of all "),t("Term",{attrs:{term:"workflow"}}),e._v(" owned threads. This is a great way to troubleshoot any "),t("Term",{attrs:{term:"workflow"}}),e._v(" in production.")],1),e._v(" "),t("p",[e._v("Example")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('$cadence --do samples-domain wf query -w <workflowID> -qt __stack_trace\n"coroutine 1 [blocked on selector-1.Select]:\\nmain.sampleSignalCounterWorkflow(0x1a99ae8, 0xc00009d700, 0x0, 0x0, 0x0)\\n\\t/Users/qlong/indeed/cadence-samples/cmd/samples/recipes/signalcounter/signal_counter_workflow.go:38 +0x1be\\nreflect.Value.call(0x1852ac0, 0x19cb608, 0x13, 0x1979180, 0x4, 0xc00045aa80, 0x2, 0x2, 0x2, 0x18, ...)\\n\\t/usr/local/Cellar/go/1.16.3/libexec/src/reflect/value.go:476 +0x8e7\\nreflect.Value.Call(0x1852ac0, 0x19cb608, 0x13, 0xc00045aa80, 0x2, 0x2, 0x1, 0x2, 0xc00045a720)\\n\\t/usr/local/Cellar/go/1.16.3/libexec/src/reflect/value.go:337 +0xb9\\ngo.uber.org/cadence/internal.(*workflowEnvironmentInterceptor).ExecuteWorkflow(0xc00045a720, 0x1a99ae8, 0xc00009d700, 0xc0001ca820, 0x20, 0xc00007fad0, 0x1, 0x1, 0x1, 0x1, ...)\\n\\t/Users/qlong/go/pkg/mod/go.uber.org/cadence@v0.17.1-0.20210708064625-c4a7e032cc13/internal/workflow.go:372 +0x2cb\\ngo.uber.org/cadence/internal.(*workflowExecutor).Execute(0xc000098d80, 0x1a99ae8, 0xc00009d700, 0xc0001b127e, 0x2, 0x2, 0xc00044cb01, 0xc000070101, 0xc000073738, 0x1729f25, ...)\\n\\t/Users/qlong/go/pkg/mod/go.uber.org/cadence@v0.17.1-0.20210708064625-c4a7e032cc13/internal/internal_worker.go:699 +0x28d\\ngo.uber.org/cadence/internal.(*syncWorkflowDefinition).Execute.func1(0x1a99ce0, 0xc00045a9f0)\\n\\t/Users/qlong/go/pkg/mod/go.uber.org/cadence@v0.17.1-0.20210708064625-c4a7e032cc13/internal/internal_workflow.go:466 +0x106"\n')])])])])}),[],!1,null,null,null);t.default=o.exports}}]);