(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{383:function(t,e,n){"use strict";n.r(e);var s=n(0),a=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"starting-workflows"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#starting-workflows"}},[t._v("#")]),t._v(" Starting workflows")]),t._v(" "),e("p",[t._v("Starting workflows can be done from any service that can send requests to\nthe Cadence server. There is no requirement for workflows to be started from the\nworker services.")]),t._v(" "),e("p",[t._v("Generally workflows can either be started using a direct reference to the\nworkflow code, or by referring to the registered name of the function. In\n"),e("RouterLink",{attrs:{to:"/docs/go-client/create-workflows/#registration"}},[t._v("Workflow Registration")]),t._v(" we show\nhow to register the workflows.")],1),t._v(" "),e("h2",{attrs:{id:"starting-a-workflow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#starting-a-workflow"}},[t._v("#")]),t._v(" Starting a workflow")]),t._v(" "),e("p",[t._v("After "),e("a",{attrs:{href:"/docs/go-client/create-workflows"}},[t._v("creating a workflow")]),t._v(" we can start it.\nThis can be done "),e("RouterLink",{attrs:{to:"/docs/cli/#start-workflow"}},[t._v("from the cli")]),t._v(", but typically\nwe want to start workflow programmatically e.g. from an http handler. We can do\nthis using the\n"),e("a",{attrs:{href:"https://pkg.go.dev/go.uber.org/cadence/client#Client",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("client.StartWorkflow")]),e("OutboundLink")],1),t._v("\nfunction:")],1),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"go.uber.org/cadence/client"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cadenceClient client"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Client \n# Initialize cadenceClient\n\ncadenceClient"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("StartWorkflow")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    ctx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    client"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("StartWorkflowOptions"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        TaskList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workflow-task-list"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        ExecutionStartToCloseTimeout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    WorkflowFunc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    workflowArg1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    workflowArg2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    workflowArg3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("The will start the workflow defined in the function "),e("code",[t._v("WorkflowFunc")]),t._v(", note that\nfor named workflows "),e("code",[t._v("WorkflowFunc")]),t._v(" could be replaced by the name e.g.\n"),e("code",[t._v('"WorkflowFuncName"')]),t._v(".")]),t._v(" "),e("p",[e("code",[t._v("workflowArg1")]),t._v(", "),e("code",[t._v("workflowArg2")]),t._v(", "),e("code",[t._v("workflowArg3")]),t._v(" are arguments to the workflow, as\nspecified in "),e("code",[t._v("WorkflowFunc")]),t._v(", note that the arguments needs to be "),e("em",[t._v("serializable")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"jitter-start-and-batches-of-workflows"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jitter-start-and-batches-of-workflows"}},[t._v("#")]),t._v(" Jitter Start and Batches of Workflows")]),t._v(" "),e("p",[t._v("Below we list all the "),e("code",[t._v("startWorkflowOptions")]),t._v(", however a particularly useful option is\n"),e("code",[t._v("JitterStart")]),t._v(".")]),t._v(" "),e("p",[t._v("Starting many workflows at the same time will have Cadence trying to schedule\nall the workflows immediately. This can result in overloading Cadence and the\ndatabase backing Cadence, as well as the workers processing the workflows.")]),t._v(" "),e("p",[t._v("This is especially bad when the workflow starts comes in batches, such as an end\nof month load. These sudden loads can lead to both Cadence and the workers\nneeding to immediately scale up. Scaling up often takes some time, causing\nqueues in Cadence, delaying the execution of all workflows, potentially causing\nworkflows to timeout.")]),t._v(" "),e("p",[t._v("To solve this we can start our workflows with "),e("code",[t._v("JitterStart")]),t._v(". "),e("code",[t._v("JitterStart")]),t._v(" will start\nthe workflow at a random point between "),e("code",[t._v("now")]),t._v(" and "),e("code",[t._v("now + JitterStart")]),t._v(", so if we\ne.g. start 1000 workflows at 12:00 AM with a "),e("code",[t._v("JitterStart")]),t._v(" of 6 hours, the\nworkflows will be randomly started between 12:00 AM and 6:00 PM.")]),t._v(" "),e("p",[t._v("This makes the sudden load of 1000 workflows much more manageable.")]),t._v(" "),e("p",[t._v("For many batch-like workloads a random delay is completely acceptable as the\nbatch just needs to be processed e.g. before the end of the day.")]),t._v(" "),e("p",[t._v("Adding a JitterStart of 6 hours in the example above is as simple as adding")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[t._v("JitterStart"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Hour"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),e("p",[t._v("to the options like so,")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"go.uber.org/cadence/client"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cadenceClient client"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Client\n# Initialize cadenceClient\n\ncadenceClient"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("StartWorkflow")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    ctx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    client"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("StartWorkflowOptions"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        TaskList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workflow-task-list"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        ExecutionStartToCloseTimeout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        JitterStart"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Hour"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Added JitterStart")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    WorkflowFunc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    workflowArg1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    workflowArg2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    workflowArg3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("now the workflow will start at a random point between now and six hours from now.")]),t._v(" "),e("h2",{attrs:{id:"startworkflowoptions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#startworkflowoptions"}},[t._v("#")]),t._v(" StartWorkflowOptions")]),t._v(" "),e("p",[t._v("The\n"),e("a",{attrs:{href:"https://pkg.go.dev/go.uber.org/cadence/internal#StartWorkflowOptions",target:"_blank",rel:"noopener noreferrer"}},[t._v("client.StartWorkflowOptions"),e("OutboundLink")],1),t._v("\nspecifies the behavior of this particular workflow. The invocation above only\nspecifies the two mandatory options; "),e("code",[t._v("TaskList")]),t._v(" and\n"),e("code",[t._v("ExecutionStartToCloseTimeout")]),t._v(", all the options are described in the "),e("a",{attrs:{href:"https://pkg.go.dev/go.uber.org/cadence/internal#StartWorkflowOptions",target:"_blank",rel:"noopener noreferrer"}},[t._v("inline\ndocumentation"),e("OutboundLink")],1),t._v(":")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" StartWorkflowOptions "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ID - The business identifier of the workflow execution.")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Optional: defaulted to a uuid.")]),t._v("\n\tID "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TaskList - The decisions of the workflow are scheduled on this queue.")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is also the default task list on which activities are scheduled. The workflow author can choose")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// to override this using activity options.")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Mandatory: No default.")]),t._v("\n\tTaskList "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ExecutionStartToCloseTimeout - The timeout for duration of workflow execution.")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The resolution is seconds.")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Mandatory: No default.")]),t._v("\n\tExecutionStartToCloseTimeout time"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Duration\n\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DecisionTaskStartToCloseTimeout - The timeout for processing decision task from the time the worker")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pulled this task. If a decision task is lost, it is retried after this timeout.")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The resolution is seconds.")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Optional: defaulted to 10 secs.")]),t._v("\n\tDecisionTaskStartToCloseTimeout time"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Duration\n\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// WorkflowIDReusePolicy - Whether server allow reuse of workflow ID, can be useful")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// for dedup logic if set to WorkflowIdReusePolicyRejectDuplicate.")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Optional: defaulted to WorkflowIDReusePolicyAllowDuplicateFailedOnly.")]),t._v("\n\tWorkflowIDReusePolicy WorkflowIDReusePolicy\n\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RetryPolicy - Optional retry policy for workflow. If a retry policy is specified, in case of workflow failure")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// server will start new workflow execution if needed based on the retry policy.")]),t._v("\n\tRetryPolicy "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("RetryPolicy\n\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// CronSchedule - Optional cron schedule for workflow. If a cron schedule is specified, the workflow will run")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// as a cron based on the schedule. The scheduling will be based on UTC time. Schedule for next run only happen")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// after the current run is completed/failed/timeout. If a RetryPolicy is also supplied, and the workflow failed")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or timeout, the workflow will be retried based on the retry policy. While the workflow is retrying, it won't")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// schedule its next run. If next schedule is due while workflow is running (or retrying), then it will skip that")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// schedule. Cron workflow will not stop until it is terminated or cancelled (by returning cadence.CanceledError).")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The cron spec is as following:")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ┌───────────── minute (0 - 59)")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// │ ┌───────────── hour (0 - 23)")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// │ │ ┌───────────── day of the month (1 - 31)")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// │ │ │ ┌───────────── month (1 - 12)")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// │ │ │ │ │")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// │ │ │ │ │")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// * * * * *")]),t._v("\n\tCronSchedule "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Memo - Optional non-indexed info that will be shown in list workflow.")]),t._v("\n\tMemo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SearchAttributes - Optional indexed info that can be used in query of List/Scan/Count workflow APIs (only")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// supported when Cadence server is using ElasticSearch). The key and value type must be registered on Cadence server side.")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use GetSearchAttributes API to get valid key and corresponding value type.")]),t._v("\n\tSearchAttributes "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DelayStartSeconds - Seconds to delay the workflow start")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The resolution is seconds.")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Optional: defaulted to 0 seconds")]),t._v("\n\tDelayStart time"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Duration\n\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JitterStart - Seconds to jitter the workflow start. For example, if set to 10, the workflow will start some time between 0-10 seconds.")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This works with CronSchedule and with DelayStart.")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Optional: defaulted to 0 seconds")]),t._v("\n\tJitterStart time"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Duration\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);