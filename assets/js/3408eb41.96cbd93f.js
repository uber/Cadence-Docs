"use strict";(self.webpackChunkcadence=self.webpackChunkcadence||[]).push([[9866],{7521:(e,o,l)=>{l.r(o),l.d(o,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"get-started/java-hello-world","title":"Java hello world","description":"This section provides step by step instructions on how to write and run a HelloWorld with Java.","source":"@site/docs/01-get-started/02-java-hello-world.md","sourceDirName":"01-get-started","slug":"/get-started/java-hello-world","permalink":"/Cadence-Docs/docs/get-started/java-hello-world","draft":false,"unlisted":false,"editUrl":"https://github.com/cadence-workflow/Cadence-Docs/tree/master/docs/01-get-started/02-java-hello-world.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"layout":"default","title":"Java hello world","permalink":"/docs/get-started/java-hello-world"},"sidebar":"docsSidebar","previous":{"title":"Server Installation","permalink":"/Cadence-Docs/docs/get-started/server-installation"},"next":{"title":"Golang hello world","permalink":"/Cadence-Docs/docs/get-started/golang-hello-world"}}');var t=l(4848),a=l(8453);const r={layout:"default",title:"Java hello world",permalink:"/docs/get-started/java-hello-world"},i="Java Hello World",s={},c=[{value:"Include Cadence Java Client Dependency",id:"include-cadence-java-client-dependency",level:2},{value:"Implement Hello World Workflow",id:"implement-hello-world-workflow",level:2},{value:"Execute Hello World Workflow using the CLI",id:"execute-hello-world-workflow-using-the-cli",level:2},{value:"List Workflows and Workflow History",id:"list-workflows-and-workflow-history",level:2},{value:"What is Next",id:"what-is-next",level:2}];function d(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"java-hello-world",children:"Java Hello World"})}),"\n",(0,t.jsx)(o.p,{children:"This section provides step by step instructions on how to write and run a HelloWorld with Java."}),"\n",(0,t.jsxs)(o.p,{children:["For complete, ready to build samples covering all the key Cadence concepts go to ",(0,t.jsx)(o.a,{href:"https://github.com/cadence-workflow/cadence-java-samples",children:"Cadence-Java-Samples"}),"."]}),"\n",(0,t.jsxs)(o.p,{children:["You can also review ",(0,t.jsx)(o.a,{href:"/docs/java-client",children:"Java-Client"})," and ",(0,t.jsx)(o.a,{href:"https://www.javadoc.io/doc/com.uber.cadence/cadence-client/latest/index.html",children:"java-docs"})," for more documentation."]}),"\n",(0,t.jsx)(o.h2,{id:"include-cadence-java-client-dependency",children:"Include Cadence Java Client Dependency"}),"\n",(0,t.jsxs)(o.p,{children:["Go to the ",(0,t.jsx)(o.a,{href:"https://mvnrepository.com/artifact/com.uber.cadence/cadence-client",children:"Maven Repository Uber Cadence Java Client Page"}),"\nand find the latest version of the library. Include it as a dependency into your Java project. For example if you\nare using Gradle the dependency looks like:"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"compile group: 'com.uber.cadence', name: 'cadence-client', version: '<latest_version>'\n"})}),"\n",(0,t.jsx)(o.p,{children:"Also add the following dependencies that cadence-client relies on:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"compile group: 'commons-configuration', name: 'commons-configuration', version: '1.9'\ncompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'\n"})}),"\n",(0,t.jsx)(o.p,{children:"Make sure that the following code compiles:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-java",children:"import com.uber.cadence.workflow.Workflow;\nimport com.uber.cadence.workflow.WorkflowMethod;\nimport org.slf4j.Logger;\n\npublic class GettingStarted {\n\n    private static Logger logger = Workflow.getLogger(GettingStarted.class);\n\n    public interface HelloWorld {\n        @WorkflowMethod\n        void sayHello(String name);\n    }\n\n}\n"})}),"\n",(0,t.jsxs)(o.p,{children:["If you are having problems setting up the build files use the\n",(0,t.jsx)(o.a,{href:"https://github.com/cadence-workflow/cadence-java-samples",children:"Cadence Java Samples"})," GitHub repository as a reference."]}),"\n",(0,t.jsx)(o.p,{children:"Also add the following logback config file somewhere in your classpath:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-xml",children:'<configuration>\n    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">\n        \x3c!-- encoders are assigned the type\n             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --\x3e\n        <encoder>\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <logger name="io.netty" level="INFO"/>\n    <root level="INFO">\n        <appender-ref ref="STDOUT" />\n    </root>\n</configuration>\n'})}),"\n",(0,t.jsx)(o.h2,{id:"implement-hello-world-workflow",children:"Implement Hello World Workflow"}),"\n",(0,t.jsxs)(o.p,{children:["Let's add ",(0,t.jsx)(o.code,{children:"HelloWorldImpl"})," with the ",(0,t.jsx)(o.code,{children:"sayHello"}),' method that just logs the "Hello ..." and returns.']}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-java",children:'import com.uber.cadence.worker.Worker;\nimport com.uber.cadence.workflow.Workflow;\nimport com.uber.cadence.workflow.WorkflowMethod;\nimport org.slf4j.Logger;\n\npublic class GettingStarted {\n\n    private static Logger logger = Workflow.getLogger(GettingStarted.class);\n\n    public interface HelloWorld {\n        @WorkflowMethod\n        void sayHello(String name);\n    }\n\n    public static class HelloWorldImpl implements HelloWorld {\n\n        @Override\n        public void sayHello(String name) {\n            logger.info("Hello " + name + "!");\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(o.p,{children:"To link the workflow implementation to the Cadence framework, it should be registered with a worker that connects to\na Cadence Service. By default the worker connects to the locally running Cadence service."}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-java",children:"public static void main(String[] args) {\n  WorkflowClient workflowClient =\n      WorkflowClient.newInstance(\n          new WorkflowServiceTChannel(ClientOptions.defaultInstance()),\n          WorkflowClientOptions.newBuilder().setDomain(DOMAIN).build());\n  // Get worker to poll the task list.\n  WorkerFactory factory = WorkerFactory.newInstance(workflowClient);\n  Worker worker = factory.newWorker(TASK_LIST);\n  worker.registerWorkflowImplementationTypes(HelloWorldImpl.class);\n  factory.start();\n}\n"})}),"\n",(0,t.jsx)(o.p,{children:"The code is slightly different if you are using client version prior to 3.0.0:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-java",children:'public static void main(String[] args) {\n    Worker.Factory factory = new Worker.Factory("test-domain");\n    Worker worker = factory.newWorker("HelloWorldTaskList");\n    worker.registerWorkflowImplementationTypes(HelloWorldImpl.class);\n    factory.start();\n}\n'})}),"\n",(0,t.jsx)(o.h2,{id:"execute-hello-world-workflow-using-the-cli",children:"Execute Hello World Workflow using the CLI"}),"\n",(0,t.jsx)(o.p,{children:"Now run the worker program. Following is an example log:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-log",children:'13:35:02.575 [main] INFO  c.u.c.s.WorkflowServiceTChannel - Initialized TChannel for service cadence-frontend, LibraryVersion: 2.2.0, FeatureVersion: 1.0.0\n13:35:02.671 [main] INFO  c.u.cadence.internal.worker.Poller - start(): Poller{options=PollerOptions{maximumPollRateIntervalMilliseconds=1000, maximumPollRatePerSecond=0.0, pollBackoffCoefficient=2.0, pollBackoffInitialInterval=PT0.2S, pollBackoffMaximumInterval=PT20S, pollThreadCount=1, pollThreadNamePrefix=\'Workflow Poller taskList="HelloWorldTaskList", domain="test-domain", type="workflow"\'}, identity=45937@maxim-C02XD0AAJGH6}\n13:35:02.673 [main] INFO  c.u.cadence.internal.worker.Poller - start(): Poller{options=PollerOptions{maximumPollRateIntervalMilliseconds=1000, maximumPollRatePerSecond=0.0, pollBackoffCoefficient=2.0, pollBackoffInitialInterval=PT0.2S, pollBackoffMaximumInterval=PT20S, pollThreadCount=1, pollThreadNamePrefix=\'null\'}, identity=81b8d0ac-ff89-47e8-b842-3dd26337feea}\n'})}),"\n",(0,t.jsx)(o.p,{children:"No Hello printed. This is expected because a worker is just a workflow code host. The workflow has to be started to execute. Let's use Cadence CLI to start the workflow:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-sh-session",children:'$ docker run --network=host --rm ubercadence/cli:master --do test-domain workflow start --tasklist HelloWorldTaskList --workflow_type HelloWorld::sayHello --execution_timeout 3600 --input \\"World\\"\nStarted Workflow Id: bcacfabd-9f9a-46ac-9b25-83bcea5d7fd7, run Id: e7c40431-8e23-485b-9649-e8f161219efe\n'})}),"\n",(0,t.jsx)(o.p,{children:"The output of the program should change to:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-log",children:'13:35:02.575 [main] INFO  c.u.c.s.WorkflowServiceTChannel - Initialized TChannel for service cadence-frontend, LibraryVersion: 2.2.0, FeatureVersion: 1.0.0\n13:35:02.671 [main] INFO  c.u.cadence.internal.worker.Poller - start(): Poller{options=PollerOptions{maximumPollRateIntervalMilliseconds=1000, maximumPollRatePerSecond=0.0, pollBackoffCoefficient=2.0, pollBackoffInitialInterval=PT0.2S, pollBackoffMaximumInterval=PT20S, pollThreadCount=1, pollThreadNamePrefix=\'Workflow Poller taskList="HelloWorldTaskList", domain="test-domain", type="workflow"\'}, identity=45937@maxim-C02XD0AAJGH6}\n13:35:02.673 [main] INFO  c.u.cadence.internal.worker.Poller - start(): Poller{options=PollerOptions{maximumPollRateIntervalMilliseconds=1000, maximumPollRatePerSecond=0.0, pollBackoffCoefficient=2.0, pollBackoffInitialInterval=PT0.2S, pollBackoffMaximumInterval=PT20S, pollThreadCount=1, pollThreadNamePrefix=\'null\'}, identity=81b8d0ac-ff89-47e8-b842-3dd26337feea}\n13:40:28.308 [workflow-root] INFO  c.u.c.samples.hello.GettingStarted - Hello World!\n'})}),"\n",(0,t.jsx)(o.p,{children:"Let's start another "}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-sh-session",children:'$ docker run --network=host --rm ubercadence/cli:master --do test-domain workflow start --tasklist HelloWorldTaskList --workflow_type HelloWorld::sayHello --execution_timeout 3600 --input \\"Cadence\\"\nStarted Workflow Id: d2083532-9c68-49ab-90e1-d960175377a7, run Id: 331bfa04-834b-45a7-861e-bcb9f6ddae3e\n'})}),"\n",(0,t.jsx)(o.p,{children:"And the output changed to:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-log",children:'13:35:02.575 [main] INFO  c.u.c.s.WorkflowServiceTChannel - Initialized TChannel for service cadence-frontend, LibraryVersion: 2.2.0, FeatureVersion: 1.0.0\n13:35:02.671 [main] INFO  c.u.cadence.internal.worker.Poller - start(): Poller{options=PollerOptions{maximumPollRateIntervalMilliseconds=1000, maximumPollRatePerSecond=0.0, pollBackoffCoefficient=2.0, pollBackoffInitialInterval=PT0.2S, pollBackoffMaximumInterval=PT20S, pollThreadCount=1, pollThreadNamePrefix=\'Workflow Poller taskList="HelloWorldTaskList", domain="test-domain", type="workflow"\'}, identity=45937@maxim-C02XD0AAJGH6}\n13:35:02.673 [main] INFO  c.u.cadence.internal.worker.Poller - start(): Poller{options=PollerOptions{maximumPollRateIntervalMilliseconds=1000, maximumPollRatePerSecond=0.0, pollBackoffCoefficient=2.0, pollBackoffInitialInterval=PT0.2S, pollBackoffMaximumInterval=PT20S, pollThreadCount=1, pollThreadNamePrefix=\'null\'}, identity=81b8d0ac-ff89-47e8-b842-3dd26337feea}\n13:40:28.308 [workflow-root] INFO  c.u.c.samples.hello.GettingStarted - Hello World!\n13:42:34.994 [workflow-root] INFO  c.u.c.samples.hello.GettingStarted - Hello Cadence!\n'})}),"\n",(0,t.jsx)(o.h2,{id:"list-workflows-and-workflow-history",children:"List Workflows and Workflow History"}),"\n",(0,t.jsx)(o.p,{children:"Let's list our workflow in the "}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-sh-session",children:"$ docker run --network=host --rm ubercadence/cli:master --do test-domain workflow list\n             WORKFLOW TYPE            |             WORKFLOW ID              |                RUN ID                | START TIME | EXECUTION TIME | END TIME\n  HelloWorld::sayHello                | d2083532-9c68-49ab-90e1-d960175377a7 | 331bfa04-834b-45a7-861e-bcb9f6ddae3e | 20:42:34   | 20:42:34       | 20:42:35\n  HelloWorld::sayHello                | bcacfabd-9f9a-46ac-9b25-83bcea5d7fd7 | e7c40431-8e23-485b-9649-e8f161219efe | 20:40:28   | 20:40:28       | 20:40:29\n"})}),"\n",(0,t.jsx)(o.p,{children:"Now let's look at the workflow_execution history:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-sh-session",children:'$ docker run --network=host --rm ubercadence/cli:master --do test-domain workflow showid 1965109f-607f-4b14-a5f2-24399a7b8fa7\n  1  WorkflowExecutionStarted    {WorkflowType:{Name:HelloWorld::sayHello},\n                                  TaskList:{Name:HelloWorldTaskList},\n                                  Input:["World"],\n                                  ExecutionStartToCloseTimeoutSeconds:3600,\n                                  TaskStartToCloseTimeoutSeconds:10,\n                                  ContinuedFailureDetails:[],\n                                  LastCompletionResult:[],\n                                  Identity:cadence-cli@linuxkit-025000000001,\n                                  Attempt:0,\n                                  FirstDecisionTaskBackoffSeconds:0}\n  2  DecisionTaskScheduled       {TaskList:{Name:HelloWorldTaskList},\n                                  StartToCloseTimeoutSeconds:10,\n                                  Attempt:0}\n  3  DecisionTaskStarted         {ScheduledEventId:2,\n                                  Identity:45937@maxim-C02XD0AAJGH6,\n                                  RequestId:481a14e5-67a4-436e-9a23-7f7fb7f87ef3}\n  4  DecisionTaskCompleted       {ExecutionContext:[],\n                                  ScheduledEventId:2,\n                                  StartedEventId:3,\n                                  Identity:45937@maxim-C02XD0AAJGH6}\n  5  WorkflowExecutionCompleted  {Result:[],\n                                  DecisionTaskCompletedEventId:4}\n'})}),"\n",(0,t.jsx)(o.p,{children:"Even for such a trivial workflow, the history gives a lot of useful information. For complex workflows this is a really useful tool for production and development troubleshooting. History can be automatically archived to a long-term blob store (for example Amazon S3) upon workflow completion for compliance, analytical, and troubleshooting purposes."}),"\n",(0,t.jsx)(o.h2,{id:"what-is-next",children:"What is Next"}),"\n",(0,t.jsxs)(o.p,{children:["Now you have completed the tutorials. You can continue to explore the key ",(0,t.jsx)(o.a,{href:"/docs/concepts",children:"concepts"})," in Cadence, and also how to use them with ",(0,t.jsx)(o.a,{href:"/docs/java-client",children:"Java Client"})]})]})}function f(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,o,l)=>{l.d(o,{R:()=>r,x:()=>i});var n=l(6540);const t={},a=n.createContext(t);function r(e){const o=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),n.createElement(a.Provider,{value:o},e.children)}}}]);