"use strict";(self.webpackChunkcadence=self.webpackChunkcadence||[]).push([[1010],{6705:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"concepts/cross-dc-replication","title":"Cross DC replication","description":"The Cadence GlobalDomainworkflow_execution: from another","source":"@site/docs/03-concepts/08-cross-dc-replication.md","sourceDirName":"03-concepts","slug":"/concepts/cross-dc-replication","permalink":"/Cadence-Docs/docs/concepts/cross-dc-replication","draft":false,"unlisted":false,"editUrl":"https://github.com/cadence-workflow/Cadence-Docs/tree/master/docs/03-concepts/08-cross-dc-replication.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"layout":"default","title":"Cross DC replication","permalink":"/docs/concepts/cross-dc-replication"},"sidebar":"docsSidebar","previous":{"title":"Archival","permalink":"/Cadence-Docs/docs/concepts/archival"},"next":{"title":"Search workflows(Advanced visibility)","permalink":"/Cadence-Docs/docs/concepts/search-workflows"}}');var i=o(4848),r=o(8453);const t={layout:"default",title:"Cross DC replication",permalink:"/docs/concepts/cross-dc-replication"},s="Cross-DC replication",l={},c=[{value:"Global Domains Architecture",id:"global-domains-architecture",level:2},{value:"Conflict Resolution",id:"conflict-resolution",level:3},{value:"Global Domain Concepts, Configuration and Operation",id:"global-domain-concepts-configuration-and-operation",level:2},{value:"Concepts",id:"concepts",level:3},{value:"IsGlobal",id:"isglobal",level:4},{value:"Clusters",id:"clusters",level:4},{value:"Active Cluster Name",id:"active-cluster-name",level:4},{value:"Failover Version",id:"failover-version",level:4},{value:"Operate by CLI",id:"operate-by-cli",level:3},{value:"Describe Global Domain",id:"describe-global-domain",level:4},{value:"Failover Global Domain using domain update command(being deprecated in favor of managed graceful failover)",id:"failover-global-domain-using-domain-update-commandbeing-deprecated-in-favor-of-managed-graceful-failover",level:4},{value:"Failover Global Domain using Managed Graceful Failover",id:"failover-global-domain-using-managed-graceful-failover",level:4},{value:"Running Locally",id:"running-locally",level:2},{value:"Running in Production",id:"running-in-production",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"cross-dc-replication",children:"Cross-DC replication"})}),"\n",(0,i.jsx)(n.p,{children:"The Cadence Global Domain feature provides clients with the capability to continue their workflow_execution from another\ncluster in the event of a datacenter failover. Although you can configure a Global Domain to be replicated to any number of\nclusters, it is only considered active in a single cluster."}),"\n",(0,i.jsx)(n.h2,{id:"global-domains-architecture",children:"Global Domains Architecture"}),"\n",(0,i.jsxs)(n.p,{children:["Cadence has introduced a new top level entity, Global Domains, which provides support for replication of workflow\nexecution across clusters. A global domain can be configured with more than one clusters, but can only be ",(0,i.jsx)(n.code,{children:"active"})," in one of the clusters at any point of time.\nWe call it ",(0,i.jsx)(n.code,{children:"passive"})," or ",(0,i.jsx)(n.code,{children:"standby"})," when not active in other clusters."]}),"\n",(0,i.jsx)(n.p,{children:"The number of standby clusters can be zero, if a global domain only configured to one cluster. This is preferred/recommended."}),"\n",(0,i.jsxs)(n.p,{children:["Any workflow of a global domain can only make make progress in its ",(0,i.jsx)(n.code,{children:"active"})," cluster. And the workflow progress is replicated to other ",(0,i.jsx)(n.code,{children:"standby"})," clusters. For example,\nstarting workflow by calling ",(0,i.jsx)(n.code,{children:"StartWorkflow"}),", or starting activity(by ",(0,i.jsx)(n.code,{children:"PollForActivityTask"})," API), can only be processed in its active cluster. After active cluster made progress,\nstandby clusters (if any) will poll the history from active to replicate the workflow states."]}),"\n",(0,i.jsxs)(n.p,{children:["However, standby clusters can also receive the requests, e.g. for starting workflows or starting activities. They know which cluster the domain is active at.\nSo the requests can be routed to the active clusters. This is called ",(0,i.jsx)(n.code,{children:"api-forwarding"})," in Cadence. ",(0,i.jsx)(n.code,{children:"api-forwarding"})," makes it possible to have no downtime during failover.\nThere are two ",(0,i.jsx)(n.code,{children:"api-forwarding"})," policy: ",(0,i.jsx)(n.code,{children:"selected-api-forwarding"})," and ",(0,i.jsx)(n.code,{children:"all-domain-api-forwarding"})," policy."]}),"\n",(0,i.jsxs)(n.p,{children:["When using ",(0,i.jsx)(n.code,{children:"selected-api-forwarding"}),", applications need to run different set of activity & workflow workers polling on every cluster.\nCadence will only dispatch tasks on the current active cluster; workers on the standby cluster will sit idle\nuntil the Global Domain is failed over. This is recommended if XDC is being used in multiple clusters running in very remote data centers(regions), which forwarding is expensive to do."]}),"\n",(0,i.jsxs)(n.p,{children:["When using ",(0,i.jsx)(n.code,{children:"all-domain-api-forwarding"}),", applications only need to run activity & workflow workers polling on one cluster. This makes it easier for the application setup. This is recommended\nwhen clusters are all in local or nearby datacenters.  See more details in ",(0,i.jsx)(n.a,{href:"https://github.com/cadence-workflow/cadence/discussions/4530",children:"discussion"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"conflict-resolution",children:"Conflict Resolution"}),"\n",(0,i.jsx)(n.p,{children:"Unlike local domains which provide at-most-once semantics for activity execution, Global Domains can only support at-least-once\nsemantics. Cadence global domain relies on asynchronous replication of events across clusters, so in the event of a failover\nit is possible that activity gets dispatched again on the new active cluster due to a replication task lag. This also\nmeans that whenever workflow_execution is updated after a failover by the new cluster, any previous replication tasks\nfor that execution cannot be applied. This results in loss of some progress made by the workflow_execution in the\nprevious active cluster. During such conflict resolution, Cadence re-injects any external events like Signals to the\nnew history before discarding replication tasks. Even though some progress could rollback during failovers, Cadence\nprovides the guarantee that workflows won\u2019t get stuck and will continue to make forward progress."}),"\n",(0,i.jsx)(n.h2,{id:"global-domain-concepts-configuration-and-operation",children:"Global Domain Concepts, Configuration and Operation"}),"\n",(0,i.jsx)(n.h3,{id:"concepts",children:"Concepts"}),"\n",(0,i.jsx)(n.h4,{id:"isglobal",children:"IsGlobal"}),"\n",(0,i.jsx)(n.p,{children:"This config is used to distinguish domains local to the cluster from the global domain. It controls the creation of\nreplication tasks on updates allowing the state to be replicated across clusters. This is a read-only setting that can\nonly be set when the domain is provisioned."}),"\n",(0,i.jsx)(n.h4,{id:"clusters",children:"Clusters"}),"\n",(0,i.jsx)(n.p,{children:"A list of clusters where the domain can fail over to, including the current active cluster.\nThis is also a read-only setting that can only be set when the domain is provisioned. A re-replication feature on the\nroadmap will allow updating this config to add/remove clusters in the future."}),"\n",(0,i.jsx)(n.h4,{id:"active-cluster-name",children:"Active Cluster Name"}),"\n",(0,i.jsx)(n.p,{children:"Name of the current active cluster for the Global Domain. This config is updated each time the Global Domain is failed over to\nanother cluster."}),"\n",(0,i.jsx)(n.h4,{id:"failover-version",children:"Failover Version"}),"\n",(0,i.jsx)(n.p,{children:"Unique failover version which also represents the current active cluster for Global Domain. Cadence allows failover to\nbe triggered from any cluster, so failover version is designed in a way to not allow conflicts if failover is mistakenly\ntriggered simultaneously on two clusters."}),"\n",(0,i.jsx)(n.h3,{id:"operate-by-cli",children:"Operate by CLI"}),"\n",(0,i.jsx)(n.p,{children:"The Cadence CLI can also be used to query the domain config or perform failovers. Here are some useful commands."}),"\n",(0,i.jsx)(n.h4,{id:"describe-global-domain",children:"Describe Global Domain"}),"\n",(0,i.jsx)(n.p,{children:"The following command can be used to describe Global Domain metadata:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ cadence --do cadence-canary-xdc d desc\nName: cadence-canary-xdc\nDescription: cadence canary cross dc testing domain\nOwnerEmail: cadence-dev@cadenceworkflow.io\nDomainData:\nStatus: REGISTERED\nRetentionInDays: 7\nEmitMetrics: true\nActiveClusterName: dc1\nClusters: dc1, dc2\n"})}),"\n",(0,i.jsx)(n.h4,{id:"failover-global-domain-using-domain-update-commandbeing-deprecated-in-favor-of-managed-graceful-failover",children:"Failover Global Domain using domain update command(being deprecated in favor of managed graceful failover)"}),"\n",(0,i.jsxs)(n.p,{children:["The following command can be used to failover Global Domain ",(0,i.jsx)(n.em,{children:"my-domain-global"})," to the ",(0,i.jsx)(n.em,{children:"dc2"})," cluster:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ cadence --do my-domain-global d up --ac dc2\n"})}),"\n",(0,i.jsx)(n.h4,{id:"failover-global-domain-using-managed-graceful-failover",children:"Failover Global Domain using Managed Graceful Failover"}),"\n",(0,i.jsx)(n.p,{children:"First of all, update the domain to enable this feature for the domain"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ cadence --do test-global-domain-0 d update --domain_data IsManagedByCadence:true\n$ cadence --do test-global-domain-1 d update --domain_data IsManagedByCadence:true\n$ cadence --do test-global-domain-2 d update --domain_data IsManagedByCadence:true\n...\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then you can start failover the those global domains using managed failover:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cadence admin cluster failover start --source_cluster dc1 --target_cluster dc2\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will failover all the domains with ",(0,i.jsx)(n.code,{children:"IsManagedByCadence:true"})," from dc1 to dc2."]}),"\n",(0,i.jsxs)(n.p,{children:["You can provide more detailed options when using the command, and also watch the progress of the failover.\nFeel free to explore the ",(0,i.jsx)(n.code,{children:"cadence admin cluster failover"})," tab."]}),"\n",(0,i.jsx)(n.h2,{id:"running-locally",children:"Running Locally"}),"\n",(0,i.jsxs)(n.p,{children:["The best way is to use Cadence ",(0,i.jsx)(n.a,{href:"https://github.com/cadence-workflow/cadence/tree/master/docker",children:"docker-compose"}),":\n",(0,i.jsx)(n.code,{children:"docker-compose -f docker-compose-multiclusters.yml up"})]}),"\n",(0,i.jsx)(n.h2,{id:"running-in-production",children:"Running in Production"}),"\n",(0,i.jsxs)(n.p,{children:["Enable global domain feature needs to be enabled in ",(0,i.jsx)(n.a,{href:"/docs/operation-guide/setup/#static-configuration",children:"static config"}),"."]}),"\n",(0,i.jsx)(n.p,{children:'Here we use clusterDCA and clusterDCB as an example. We pick clusterDCA as the primary(used to called "master") cluster.\nThe only difference of being a primary cluster is that it is responsible for domain registration. Primary can be changed later but it needs to be the same across all clusters.'}),"\n",(0,i.jsx)(n.p,{children:"The ClusterMeta config of clusterDCA should be"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'dcRedirectionPolicy:\n  policy: "selected-apis-forwarding"\n\nclusterMetadata:\n  enableGlobalDomain: true\n  failoverVersionIncrement: 10\n  masterClusterName: "clusterDCA"\n  currentClusterName: "clusterDCA"\n  clusterInformation:\n    clusterDCA:\n      enabled: true\n      initialFailoverVersion: 1\n      rpcName: "cadence-frontend"\n      rpcAddress: "<>:<>"\n    clusterDCB:\n      enabled: true\n      initialFailoverVersion: 0\n      rpcName: "cadence-frontend"\n      rpcAddress: "<>:<>"\n'})}),"\n",(0,i.jsx)(n.p,{children:"And ClusterMeta config of clusterDCB should be"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'dcRedirectionPolicy:\n  policy: "selected-apis-forwarding"\n\nclusterMetadata:\n  enableGlobalDomain: true\n  failoverVersionIncrement: 10\n  masterClusterName: "clusterDCA"\n  currentClusterName: "clusterDCB"\n  clusterInformation:\n    clusterDCA:\n      enabled: true\n      initialFailoverVersion: 1\n      rpcName: "cadence-frontend"\n      rpcAddress: "<>:<>"\n    clusterDCB:\n      enabled: true\n      initialFailoverVersion: 0\n\n      rpcName: "cadence-frontend"\n      rpcAddress: "<>:<>"\n'})}),"\n",(0,i.jsx)(n.p,{children:"After the configuration is deployed:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Register a global domain\n",(0,i.jsx)(n.code,{children:"cadence --do <domain_name> domain register --global_domain true  --clusters clusterDCA clusterDCB --active_cluster clusterDCA"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Run some workflow and failover domain from one to another\n",(0,i.jsx)(n.code,{children:"cadence --do <domain_name> domain update  --active_cluster clusterDCB"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Then the domain should be failed over to clusterDCB. Now worklfows are read-only in clusterDCA. So your workers polling tasks from clusterDCA will become idle."}),"\n",(0,i.jsx)(n.p,{children:"Note 1: that even though clusterDCA is standy/read-only for this domain, it can be active for another domain. So being active/standy is per domain basis not per clusters. In other words, for example if you use XDC in case of DC failure of clusterDCA, you need to failover all domains from clusterDCA to clusterDCB."}),"\n",(0,i.jsx)(n.p,{children:"Note 2: even though a domain is standy/read-only in a cluster, say clusterDCA, sending write requests(startWF, signalWF, etc) could still work because there is a forwarding component in the Frontend service. It will try to re-route the requests to an active cluster for the domain."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>s});var a=o(6540);const i={},r=a.createContext(i);function t(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);