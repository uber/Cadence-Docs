"use strict";(self.webpackChunkcadence=self.webpackChunkcadence||[]).push([[5538],{6454:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"java-client/distributed-cron","title":"Distributed CRON","description":"It is relatively straightforward to turn any Cadence into a Cron. All you need","source":"@site/docs/04-java-client/08-distributed-cron.md","sourceDirName":"04-java-client","slug":"/java-client/distributed-cron","permalink":"/docs/java-client/distributed-cron","draft":false,"unlisted":false,"editUrl":"https://github.com/cadence-workflow/Cadence-Docs/tree/master/docs/04-java-client/08-distributed-cron.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"layout":"default","title":"Distributed CRON","permalink":"/docs/java-client/distributed-cron"},"sidebar":"docsSidebar","previous":{"title":"Versioning","permalink":"/docs/java-client/versioning"},"next":{"title":"Worker service","permalink":"/docs/java-client/workers"}}');var s=t(4848),o=t(8453);const i={layout:"default",title:"Distributed CRON",permalink:"/docs/java-client/distributed-cron"},l="Distributed CRON",a={},c=[{value:"Convert an existing cron workflow",id:"convert-an-existing-cron-workflow",level:2},{value:"Retrieve last successful result",id:"retrieve-last-successful-result",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"distributed-cron",children:"Distributed CRON"})}),"\n",(0,s.jsxs)(n.p,{children:["It is relatively straightforward to turn any Cadence workflow into a Cron workflow. All you need\nis to supply a cron schedule when starting the workflow using the CronSchedule\nparameter of\n",(0,s.jsx)(n.a,{href:"https://static.javadoc.io/com.uber.cadence/cadence-client/2.5.1/com/cadence-workflow/cadence/client/WorkflowOptions.html",children:"StartWorkflowOptions"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You can also start a workflow using the Cadence CLI with an optional cron schedule using the ",(0,s.jsx)(n.code,{children:"--cron"})," argument."]}),"\n",(0,s.jsx)(n.p,{children:"For workflows with CronSchedule:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'CronSchedule is based on UTC time. For example cron schedule "15 8 * * *"\nwill run daily at 8:15am UTC. Another example "*/2 * * * 5-6" will schedule a workflow every two minutes on fridays\nand saturdays.'}),"\n",(0,s.jsx)(n.li,{children:"If a workflow failed and a RetryPolicy is supplied to the StartWorkflowOptions\nas well, the workflow will retry based on the RetryPolicy. While the workflow is\nretrying, the server will not schedule the next cron run."}),"\n",(0,s.jsx)(n.li,{children:"Cadence server only schedules the next cron run after the current run is\ncompleted. If the next schedule is due while a workflow is running (or retrying),\nthen it will skip that schedule."}),"\n",(0,s.jsx)(n.li,{children:"Cron workflows will not stop until they are terminated or cancelled."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Cadence supports the standard cron spec:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// CronSchedule - Optional cron schedule for workflow. If a cron schedule is specified, the workflow will run\n// as a cron based on the schedule. The scheduling will be based on UTC time. The schedule for the next run only happens\n// after the current run is completed/failed/timeout. If a RetryPolicy is also supplied, and the workflow failed\n// or timed out, the workflow will be retried based on the retry policy. While the workflow is retrying, it won't\n// schedule its next run. If the next schedule is due while the workflow is running (or retrying), then it will skip that\n// schedule. Cron workflow will not stop until it is terminated or cancelled (by returning cadence.CanceledError).\n// The cron spec is as follows:\n// \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n// \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n// \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1 - 31)\n// \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12)\n// \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0 - 6) (Sunday to Saturday)\n// \u2502 \u2502 \u2502 \u2502 \u2502\n// \u2502 \u2502 \u2502 \u2502 \u2502\n// * * * * *\nCronSchedule string\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cadence also supports more ",(0,s.jsx)(n.a,{href:"https://pkg.go.dev/github.com/robfig/cron#hdr-CRON_Expression_Format",children:"advanced cron expressions"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://crontab.guru/",children:"crontab guru site"})," is useful for testing your cron expressions."]}),"\n",(0,s.jsx)(n.h2,{id:"convert-an-existing-cron-workflow",children:"Convert an existing cron workflow"}),"\n",(0,s.jsxs)(n.p,{children:["Before CronSchedule was available, the previous approach to implementing cron\nworkflows was to use a delay timer as the last step and then return\n",(0,s.jsx)(n.code,{children:"ContinueAsNew"}),". One problem with that implementation is that if the workflow\nfails or times out, the cron would stop."]}),"\n",(0,s.jsxs)(n.p,{children:["To convert those workflows to make use of Cadence CronSchedule, all you need is to remove the delay timer and return without using\n",(0,s.jsx)(n.code,{children:"ContinueAsNew"}),". Then start the workflow with the desired CronSchedule."]}),"\n",(0,s.jsx)(n.h2,{id:"retrieve-last-successful-result",children:"Retrieve last successful result"}),"\n",(0,s.jsxs)(n.p,{children:["Sometimes it is useful to obtain the progress of previous successful runs.\nThis is supported by two new APIs in the client library:\n",(0,s.jsx)(n.code,{children:"HasLastCompletionResult"})," and ",(0,s.jsx)(n.code,{children:"GetLastCompletionResult"}),". Below is an example of how\nto use this in Java:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public String cronWorkflow() {\n    String lastProcessedFileName = Workflow.getLastCompletionResult(String.class);\n\n    // Process work starting from the lastProcessedFileName.\n    // Business logic implementation goes here.\n    // Updates lastProcessedFileName to the new value.\n\n    return lastProcessedFileName;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Note that this works even if one of the cron schedule runs failed. The\nnext schedule will still get the last successful result if it ever successfully\ncompleted at least once. For example, for a daily cron workflow, if the first day\nrun succeeds and the second day fails, then the third day run will still get\nthe result from first day's run using these APIs."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);