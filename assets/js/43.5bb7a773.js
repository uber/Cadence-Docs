(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{351:function(e,t,o){"use strict";o.r(t);var a=o(0),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"use-cases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#use-cases"}},[e._v("#")]),e._v(" Use cases")]),e._v(" "),t("p",[e._v("As Cadence developers, we face a difficult non-technical problem: How to position and describe the Cadence platform.")]),e._v(" "),t("p",[e._v("We call it "),t("em",[e._v("workflow")]),e._v('. But when most people hear the word "workflow" they think about '),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Low-code_development_platform",target:"_blank",rel:"noopener noreferrer"}},[e._v("low-code"),t("OutboundLink")],1),e._v(" and UIs. While these might be useful for non technical users, they frequently bring more pain than value to software engineers. Most UIs and low-code "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Domain-specific_language",target:"_blank",rel:"noopener noreferrer"}},[e._v("DSLs"),t("OutboundLink")],1),e._v(' are awesome for "hello world" demo applications, but any diagram with 100+ elements or a few thousand lines of JSON DSL is completely impractical. So positioning Cadence as a '),t("Term",{attrs:{term:"workflow"}}),e._v(" is not ideal as it turns away developers that would enjoy its code-only approach.")],1),e._v(" "),t("p",[e._v("We call it "),t("em",[e._v("orchestrator")]),e._v(". But this term is "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Orchestration_(computing)",target:"_blank",rel:"noopener noreferrer"}},[e._v("pretty narrow"),t("OutboundLink")],1),e._v(" and turns away customers that want to implement business process automation solutions.")]),e._v(" "),t("p",[e._v("We call it "),t("em",[e._v("durable function")]),e._v(" platform. It is technically a correct term. But most developers outside of the Microsoft ecosystem have never heard of "),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview",target:"_blank",rel:"noopener noreferrer"}},[e._v("Durable Functions"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("We believe that problem in naming comes from the fact that Cadence is indeed a "),t("strong",[e._v("new way to write distributed applications")]),e._v(". It is generic enough that it can be applied to practically any use case that goes beyond a single request reply. It can be used to build applications that are in traditional areas of "),t("Term",{attrs:{term:"workflow"}}),e._v(" or orchestration platforms. But it is also huge "),t("em",[e._v("developer productivity")]),e._v(" boost for multiple use cases that traditionally rely on databases and/or "),t("Term",{attrs:{term:"task"}}),e._v(" queues.")],1),e._v(" "),t("p",[e._v("This section represents a far from complete list of use cases where Cadence is a good fit. All of them have been used by real production services inside and outside of Uber.")]),e._v(" "),t("p",[e._v("Don't think of this list as exhaustive. It is common to employ multiple use types in a single application. For example, an operational management use case might need periodic execution, service orchestration, polling, "),t("Term",{attrs:{term:"event"}}),e._v(" driven, as well as interactive parts.")],1)])}),[],!1,null,null,null);t.default=r.exports}}]);