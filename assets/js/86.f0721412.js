(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{391:function(t,e,a){"use strict";a.r(e);var n=a(0),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"asynchronous-activity-completion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#asynchronous-activity-completion"}},[t._v("#")]),t._v(" Asynchronous activity completion")]),t._v(" "),e("p",[t._v("There are certain scenarios when completing an "),e("Term",{attrs:{term:"activity"}}),t._v(" upon completion of its function is not possible\nor desirable. For example, you might have an application that requires user input in order to complete\nthe "),e("Term",{attrs:{term:"activity"}}),t._v(". You could implement the "),e("Term",{attrs:{term:"activity"}}),t._v(" with a polling mechanism, but a simpler and less\nresource-intensive implementation is to asynchronously complete a Cadence "),e("Term",{attrs:{term:"activity"}}),t._v(".")],1),t._v(" "),e("p",[t._v("There two parts to implementing an asynchronously completed activity:")]),t._v(" "),e("ol",[e("li",[t._v("The "),e("Term",{attrs:{term:"activity"}}),t._v(" provides the information necessary for completion from an external system and notifies\nthe Cadence service that it is waiting for that outside callback.")],1),t._v(" "),e("li",[t._v("The external service calls the Cadence service to complete the "),e("Term",{attrs:{term:"activity"}}),t._v(".")],1)]),t._v(" "),e("p",[t._v("The following example demonstrates the first part:")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Retrieve the activity information needed to asynchronously complete the activity.")]),t._v("\nactivityInfo "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" cadence"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetActivityInfo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntaskToken "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" activityInfo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TaskToken\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Send the taskToken to the external service that will complete the activity.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Return from the activity a function indicating that Cadence should wait for an async completion")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// message.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" activity"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ErrResultPending\n")])])]),e("p",[t._v("The following code demonstrates how to complete the "),e("Term",{attrs:{term:"activity"}}),t._v(" successfully:")],1),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Instantiate a Cadence service client.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The same client can be used to complete or fail any number of activities.")]),t._v("\ncadence"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Client client "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cadence"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewClient")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Complete the activity.")]),t._v("\nclient"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("CompleteActivity")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("taskToken"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("To fail the "),e("Term",{attrs:{term:"activity"}}),t._v(", you would do the following:")],1),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Fail the activity.")]),t._v("\nclient"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("CompleteActivity")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("taskToken"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Following are the parameters of the "),e("code",[t._v("CompleteActivity")]),t._v(" function:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("taskToken")]),t._v(": The value of the binary "),e("code",[t._v("TaskToken")]),t._v(" field of the "),e("code",[t._v("ActivityInfo")]),t._v(" struct retrieved inside\nthe "),e("Term",{attrs:{term:"activity"}}),t._v(".")],1),t._v(" "),e("li",[e("code",[t._v("result")]),t._v(": The return value to record for the "),e("Term",{attrs:{term:"activity"}}),t._v(". The type of this value must match the type\nof the return value declared by the "),e("Term",{attrs:{term:"activity"}}),t._v(" function.")],1),t._v(" "),e("li",[e("code",[t._v("err")]),t._v(": The error code to return if the "),e("Term",{attrs:{term:"activity"}}),t._v(" terminates with an error.")],1)]),t._v(" "),e("p",[t._v("If "),e("code",[t._v("error")]),t._v(" is not null, the value of the "),e("code",[t._v("result")]),t._v(" field is ignored.")])])}),[],!1,null,null,null);e.default=s.exports}}]);