"use strict";(self.webpackChunkcadence=self.webpackChunkcadence||[]).push([[9699],{3915:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"java-client/queries","title":"Queries","description":"Query is to expose this internal state to the external world Cadence provides a synchronous feature. From the implementer point of view the is exposed as a synchronous callback that is invoked by external entities. Multiple such callbacks can be provided per type exposing different information to different external systems.","source":"@site/docs/04-java-client/11-queries.md","sourceDirName":"04-java-client","slug":"/java-client/queries","permalink":"/Cadence-Docs/docs/java-client/queries","draft":false,"unlisted":false,"editUrl":"https://github.com/cadence-workflow/Cadence-Docs/tree/master/docs/04-java-client/11-queries.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"layout":"default","title":"Queries","permalink":"/docs/java-client/queries"},"sidebar":"docsSidebar","previous":{"title":"Signals","permalink":"/Cadence-Docs/docs/java-client/signals"},"next":{"title":"Retries","permalink":"/Cadence-Docs/docs/java-client/retries"}}');var o=t(4848),a=t(8453);const i={layout:"default",title:"Queries",permalink:"/docs/java-client/queries"},l="Queries",s={},c=[{value:"Built-in Query: Stack Trace",id:"built-in-query-stack-trace",level:2},{value:"Customized Query",id:"customized-query",level:2},{value:"Run Query from Command Line",id:"run-query-from-command-line",level:2},{value:"Run Query from external application code",id:"run-query-from-external-application-code",level:2},{value:"Consistent Query",id:"consistent-query",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"queries",children:"Queries"})}),"\n",(0,o.jsx)(n.p,{children:"Query is to expose this internal state to the external world Cadence provides a synchronous query feature. From the workflow implementer point of view the query is exposed as a synchronous callback that is invoked by external entities. Multiple such callbacks can be provided per workflow type exposing different information to different external systems."}),"\n",(0,o.jsx)(n.p,{children:"Query callbacks must be read-only not mutating the workflow state in any way. The other limitation is that the query callback cannot contain any blocking code. Both above limitations rule out ability to invoke activities from the query handlers."}),"\n",(0,o.jsx)(n.h2,{id:"built-in-query-stack-trace",children:"Built-in Query: Stack Trace"}),"\n",(0,o.jsx)(n.p,{children:"If a workflow_execution has been stuck at a state for longer than an expected period of time, you\nmight want to query the current call stack. You can use the Cadence CLI to perform this query. For\nexample:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"cadence-cli --domain samples-domain workflow query -w my_workflow_id -r my_run_id -qt __stack_trace"})}),"\n",(0,o.jsxs)(n.p,{children:["This command uses ",(0,o.jsx)(n.code,{children:"__stack_trace"}),", which is a built-in query type supported by the Cadence client\nlibrary. You can add custom query types to handle queries such as querying the current state of a\nworkflow, or querying how many activities the workflow has completed."]}),"\n",(0,o.jsx)(n.h2,{id:"customized-query",children:"Customized Query"}),"\n",(0,o.jsx)(n.p,{children:"Cadence provides a query feature that supports synchronously returning any information from a workflow to an external caller."}),"\n",(0,o.jsxs)(n.p,{children:["Interface ",(0,o.jsx)(n.a,{href:"https://www.javadoc.io/doc/com.uber.cadence/cadence-client/latest/com/cadence-workflow/cadence/workflow/QueryMethod.html",children:(0,o.jsx)(n.strong,{children:"QueryMethod"})})," indicates that the method is a query method. Query method can be used to query a workflow state by external process at any time during its execution. This annotation applies only to workflow interface methods."]}),"\n",(0,o.jsxs)(n.p,{children:["See the ",(0,o.jsx)(n.a,{href:"https://github.com/cadence-workflow/cadence-java-samples/blob/master/src/main/java/com/uber/cadence/samples/hello/HelloQuery.java",children:"workflow"})," example code :"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public interface HelloWorld {\n    @WorkflowMethod\n    void sayHello(String name);\n\n    @SignalMethod\n    void updateGreeting(String greeting);\n\n    @QueryMethod\n    int getCount();\n}\n\npublic static class HelloWorldImpl implements HelloWorld {\n\n    private String greeting = "Hello";\n    private int count = 0;\n\n    @Override\n    public void sayHello(String name) {\n        while (!"Bye".equals(greeting)) {\n            logger.info(++count + ": " + greeting + " " + name + "!");\n            String oldGreeting = greeting;\n            Workflow.await(() -> !Objects.equals(greeting, oldGreeting));\n        }\n        logger.info(++count + ": " + greeting + " " + name + "!");\n    }\n\n    @Override\n    public void updateGreeting(String greeting) {\n        this.greeting = greeting;\n    }\n\n    @Override\n    public int getCount() {\n        return count;\n    }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The new ",(0,o.jsx)(n.code,{children:"getCount"})," method annotated with ",(0,o.jsx)(n.code,{children:"@QueryMethod"})," was added to the workflow interface definition. It is allowed\nto have multiple query methods per workflow interface."]}),"\n",(0,o.jsx)(n.p,{children:"The main restriction on the implementation of the query method is that it is not allowed to modify workflow state in any form.\nIt also is not allowed to block its thread in any way. It usually just returns a value derived from the fields of the workflow object."}),"\n",(0,o.jsx)(n.h2,{id:"run-query-from-command-line",children:"Run Query from Command Line"}),"\n",(0,o.jsx)(n.p,{children:"Let's run the updated worker and send a couple signals to it:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'cadence: docker run --network=host --rm ubercadence/cli:master --do test-domain workflow start  --workflow_id "HelloQuery" --tasklist HelloWorldTaskList --workflow_type HelloWorld::sayHello --execution_timeout 3600 --input \\"World\\"\nStarted Workflow Id: HelloQuery, run Id: 1925f668-45b5-4405-8cba-74f7c68c3135\ncadence: docker run --network=host --rm ubercadence/cli:master --do test-domain workflow signal --workflow_id "HelloQuery" --name "HelloWorld::updateGreeting" --input \\"Hi\\"\nSignal workflow succeeded.\ncadence: docker run --network=host --rm ubercadence/cli:master --do test-domain workflow signal --workflow_id "HelloQuery" --name "HelloWorld::updateGreeting" --input \\"Welcome\\"\nSignal workflow succeeded.\n'})}),"\n",(0,o.jsx)(n.p,{children:"The worker output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"17:35:50.485 [workflow-root] INFO  c.u.c.samples.hello.GettingStarted - 1: Hello World!\n17:36:10.483 [workflow-root] INFO  c.u.c.samples.hello.GettingStarted - 2: Hi World!\n17:36:16.204 [workflow-root] INFO  c.u.c.samples.hello.GettingStarted - 3: Welcome World!\n"})}),"\n",(0,o.jsx)(n.p,{children:"Now let's query the workflow using the "}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'cadence: docker run --network=host --rm ubercadence/cli:master --do test-domain workflow query --workflow_id "HelloQuery" --query_type "HelloWorld::getCount"\n:query:Query: result as JSON:\n3\n'})}),"\n",(0,o.jsx)(n.p,{children:'One limitation of the query is that it requires a worker process running because it is executing callback code.\nAn interesting feature of the query is that it works for completed workflows as well. Let\'s complete the workflow by sending "Bye" and query it.'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'cadence: docker run --network=host --rm ubercadence/cli:master --do test-domain workflow signal --workflow_id "HelloQuery" --name "HelloWorld::updateGreeting" --input \\"Bye\\"\nSignal workflow succeeded.\ncadence: docker run --network=host --rm ubercadence/cli:master --do test-domain workflow query --workflow_id "HelloQuery" --query_type "HelloWorld::getCount"\n:query:Query: result as JSON:\n4\n'})}),"\n",(0,o.jsx)(n.p,{children:"The Query method can accept parameters. This might be useful if only part of the workflow state should be returned."}),"\n",(0,o.jsx)(n.h2,{id:"run-query-from-external-application-code",children:"Run Query from external application code"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"https://www.javadoc.io/static/com.uber.cadence/cadence-client/2.7.9-alpha/com/cadence-workflow/cadence/client/WorkflowClient.html#newWorkflowStub-java.lang.Class-java.lang.String-",children:"WorkflowStub"})," without WorkflowOptions is for signal or ",(0,o.jsx)(n.a,{href:"/docs/java-client/queries",children:"query"})]}),"\n",(0,o.jsx)(n.h2,{id:"consistent-query",children:"Consistent Query"}),"\n",(0,o.jsx)(n.p,{children:"Query has two consistency levels, eventual and strong. Consider if you were to signal a workflow and then\nimmediately query the "}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"cadence-cli --domain samples-domain workflow signal -w my_workflow_id -r my_run_id -n signal_name -if ./input.json"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"cadence-cli --domain samples-domain workflow query -w my_workflow_id -r my_run_id -qt current_state"})}),"\n",(0,o.jsx)(n.p,{children:"In this example if signal were to change workflow state, query may or may not see that state update reflected\nin the query result. This is what it means for query to be eventually consistent."}),"\n",(0,o.jsx)(n.p,{children:"Query has another consistency level called strong consistency. A strongly consistent query is guaranteed\nto be based on workflow state which includes all events that came before the query was issued. An event\nis considered to have come before a query if the call creating the external event returned success before\nthe query was issued. External events which are created while the query is outstanding may or may not\nbe reflected in the workflow state the query result is based on."}),"\n",(0,o.jsx)(n.p,{children:"In order to run consistent query through the CLI do the following:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"cadence-cli --domain samples-domain workflow query -w my_workflow_id -r my_run_id -qt current_state --qcl strong"})}),"\n",(0,o.jsxs)(n.p,{children:["In order to run a query using application code, you need to use ",(0,o.jsx)(n.a,{href:"https://www.javadoc.io/doc/com.uber.cadence/cadence-client/latest/com/cadence-workflow/cadence/WorkflowService.Iface.html#SignalWorkflowExecution-com.uber.cadence.SignalWorkflowExecutionRequest-",children:"service client"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"When using strongly consistent query you should expect higher latency than eventually consistent query."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(6540);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);